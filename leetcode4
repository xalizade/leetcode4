    def rob(self, nums: List[int]) -> int:
        @cache
        def rec(i):
            if  i== len(nums)-1:
                return nums[i]
            if i >len(nums)-1:
                return 0
            return max(rec(i+2)+nums[i],rec(i+1))      
        return rec(0)

    def uniquePaths(self, m: int, n: int) -> int:
        @cache
        def re(i, j):
            if i ==m-1 or j == n-1:
                return 1
            ans = 0
            if i + 1 <m:
                ans += re(i + 1, j)
            if j + 1 < n:
                ans += re(i, j +1)
            return ans
        return re(0,0)

def change(self, amount: int, coins: List[int]) -> int:
        @cache
        def re(remain):
            if remain==0:
                return 0
            count=0
            for coin in coins:
                if remain-coin>=0:
                    count+=re(amount-coin)
            return count
        return re(amount)

    def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        n = len(nums)
        if n==1:
            return nums[0]
        def rob_range(start, end):
            dp = [0] * (n + 1)
            dp[start] = nums[start]
            if start + 1 < n:
                dp[start + 1] = max(nums[start], nums[start + 1])
            for i in range(start + 2, end + 1):
                dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
            return dp[end]
     
        if n == 1:
            return nums[0]
        else:
            return max(rob_range(0, n - 2), rob_range(1, n - 1))



    def coinChange(self, coins: List[int], amount: int) -> int:
        ans=[float('inf') for _ in range(amount+1)]
        ans[0]=0
        for s in range(amount+1):
            for coin in coins:
                if s-coin>=0:
                    ans[s]=min(ans[s],ans[s-coin]+1)
        return ans[amount] if ans[amount]<float('inf') else -1

 def minDistance(self, word1: str, word2: str) -> int:
        @cache
        def mindis(i,j):
            if i>=len(word1):
                return len(word2)-1
            if j>=len(word2):
                return len(word1)-1
            if word1[i]==word2[j]:
                return mindis(i+1,j+1)
            return 1+min(mindis(i+1,j),mindis(i,j+1),mindis(i+1,j+1)) 
        return mindis(0,0)

   def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        
        min = float('inf')
        max = 0
        
        for p in prices:
            if p < min:
                min = p
            elif p - min > max:
                max = p - min
        
        return max


def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        if n == 0:
            return 0
        elif n == 1:
            return cost[0]
        
        dp = [0] * n
        dp[0] = cost[0]
        dp[1] = cost[1]
        
        for i in range(2, n):
            dp[i] = cost[i] + min(dp[i - 1], dp[i - 2])
        
        return min(dp[n - 1], dp[n - 2])


def maxSubArray(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        max_current = max_global = nums[0]
        
        for i in range(1, len(nums)):
            max_current = max(nums[i], max_current + nums[i])
            if max_current > max_global:
                max_global = max_current
        
        return max_global


    def isSubsequence(self, s: str, t: str) -> bool:
        pointer_s, pointer_t = 0, 0
        while pointer_t < len(t):
            if pointer_s < len(s) and s[pointer_s] == t[pointer_t]:
                pointer_s += 1
            pointer_t += 1
        return pointer_s == len(s)


def canJump(self, nums: List[int]) -> bool:
        maxr = 0
        for i in range(len(nums)):
            if i > maxr:
                return False
            maxr = max(maxr, i + nums[i])
            if maxr >= len(nums) - 1:
                return True
        
        return False



    def lengthOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        dp = [1] * len(nums)
        for i in range(1, len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)



   def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 != 0:
            return False
        
        target = total // 2
        dp = [False] * (target + 1)
        dp[0] = True
        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]
        
        return dp[target]


    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        if not intervals:
            return 0
        intervals.sort(key=lambda x: x[1])
        end = intervals[0][1]
        count = 0
        for i in range(1, len(intervals)):
            if intervals[i][0] < end:
                count += 1
            else:
                end = intervals[i][1]
        
        return count


    def maxProfit(self, prices: List[int], fee: int) -> int:
        if not prices:
            return 0
        hold = -prices[0]
        cash = 0
        for price in prices[1:]:
            cash = max(cash, hold + price - fee)
            hold = max(hold, cash - price)
        
        return cash


   def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1  
        for i in range(1, target + 1):
            for num in nums:
                if i - num >= 0:
                    dp[i] += dp[i - num]
        
        return dp[target]



  def findTargetSumWays(self, nums: List[int], target: int) -> int:
        total = sum(nums)
        if (total + target) % 2 != 0 or (total + target) < 0:
            return 0
        
        subset = (total + target) // 2
        
        dp = [0] * (subset + 1)
        dp[0] = 1 
        for num in nums:
            for i in range(subset, num - 1, -1):
                dp[i] += dp[i - num]
        
        return dp[subset]



   def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        people.sort(key=lambda x: (-x[0], x[1]))
        queue = []
        for person in people:
            queue.insert(person[1], person)
        return queue


  def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        current_end = float('-inf')
        chain = 0
        for pair in pairs:
            if pair[0] > current_end:
                chain += 1
                current_end = pair[1]
        
        return chain
